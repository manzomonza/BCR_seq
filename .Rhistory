# Find the largest continuous substring
stri_join_list(strings)
# Find the largest continuous substring
stringr::stri_join_list(strings)
library(stringi)
# Find the largest continuous substring
stringi::stri_join_list(strings)
strings <- c("abcde", "bcdef", "cdefg")
# Find the largest continuous substring
stringi::stri_join_list(strings)
strings <- list("abcde", "bcdef", "cdefg")
# Find the largest continuous substring
stringi::stri_join_list(strings)
# Function to find the largest continuous substring between multiple character strings
find_largest_cont_substring <- function(strings) {
# Get the length of the longest string
max_length <- max(nchar(strings))
# Iterate over all substrings of the longest string
for (i in 1:max_length) {
for (j in i:max_length) {
# Extract the current substring
substring <- substr(strings[1], i, j)
# Check if the substring is present in all of the input strings
# and if it is a continuous substring of each input string
is_match <- TRUE
for (string in strings) {
if (!grepl(substring, string) || !stri_detect_fixed(string, substring)) {
is_match <- FALSE
break
}
}
# If the substring is a match, return it
if (is_match) {
return(substring)
}
}
}
# If no matching substring was found, return an empty string
return("")
}
find_largest_cont_substring(strings)
# Function to find the largest continuous substring between multiple character strings
find_largest_cont_substring <- function(strings) {
# Get the length of the longest string
max_length <- max(nchar(strings))
# Iterate over all substrings of the longest string
for (i in 1:max_length) {
for (j in i:max_length) {
# Extract the current substring
substring <- substr(strings[1], i, j)
# Check if the substring is present in all of the input strings
# and if it is a continuous substring of each input string
is_match <- TRUE
for (string in strings) {
if (!stri_detect_fixed(string, substring) || !stri_detect_fixed(string, substring)) {
is_match <- FALSE
break
}
}
# If the substring is a match, return it
if (is_match) {
return(substring)
}
}
}
}
find_largest_cont_substring(strings)
getwd()
setwd('../LymphocyteSeq/')
devtools::document()
getwd()
library(LymphocyteSeq)
testfiles
testfiles = c('./input/BCR/W3525_BCR/W3525_B2022.50915_v1_20221204101340383.clone_summary.csv',
'./input/BCR/W3525_BCR/W3525_B2022.50915_v1_20221204101403744.clone_summary.csv',
'./input/TCR/W2406_K2022.1455_20220903012053696.clone_summary.csv',
'./input/TCR/W2406_K2022.1455_20220903012128818.clone_summary.csv')
clonesum_read(testfiles[3])
log2(4/5)
log2(4/4)
getwd()
total_counts <- function(clone_summary){
total_counts = clone_summary %>%
dplyr::filter(Rank %in% 1:5) %>%
dplyr::group_by(Rank) %>%
dplyr::summarise(sum_total_counts = sum(Total.Counts))
rank_counts = total_counts$sum_total_counts
names(rank_counts) = 1:5
return(rank_counts)
}
total_counts(clonesum_read(testfiles[1]))
total_counts <- function(clone_summary){
require(magrittr)
total_counts = clone_summary %>%
dplyr::filter(Rank %in% 1:5) %>%
dplyr::group_by(Rank) %>%
dplyr::summarise(sum_total_counts = sum(Total.Counts))
rank_counts = total_counts$sum_total_counts
names(rank_counts) = 1:5
return(rank_counts)
}
total_counts(clonesum_read(testfiles[1]))
total_counts <- function(clone_summary){
require(magrittr)
total_counts = clone_summary %>%
dplyr::filter(rank %in% 1:5) %>%
dplyr::group_by(rank) %>%
dplyr::summarise(sum_total_counts = sum(total_counts))
rank_counts = total_counts$sum_total_counts
names(rank_counts) = 1:5
return(rank_counts)
}
total_counts(clonesum_read(testfiles[1]))
total_counts(clonesum_read(testfiles[2]))
total_counts(clonesum_read(testfiles[1]))
total_counts(clonesum_read(testfiles[4]))
sample_ID_extract = function(sampleIDpath){
sampleid = read.table(sampleIDpath)
return(sampleid)
}
sample_ID_extract('/Users/manzo/USB/USB_Diagnostics/sampleID/input/sampleID.txt')
sample_ID_extract = function(sampleIDpath){
sampleid = base::read.table(sampleIDpath)
return(sampleid)
}
sample_ID_extract('/Users/manzo/USB/USB_Diagnostics/sampleID/input/sampleID.txt')
?read.table
sample_ID_extract = function(sampleIDpath){
sampleid = utils::read.table(sampleIDpath)
return(sampleid)
}
sample_ID_extract('/Users/manzo/USB/USB_Diagnostics/sampleID/input/sampleID.txt')
sample_ID_extract = function(sampleIDpath){
sampleid = utils::read.table(sampleIDpath, sep = " ")
return(sampleid)
}
sample_ID_extract('/Users/manzo/USB/USB_Diagnostics/sampleID/input/sampleID.txt')
sample_ID_extract = function(sampleIDpath){
sampleid = utils::read.table(sampleIDpath, sep = " ")
sampleid = sampleid[,c(1,3)]
colnames(sampleid) = c("PCR_B","sample_SNP")
return(sampleid)
}
sample_ID_extract('/Users/manzo/USB/USB_Diagnostics/sampleID/input/sampleID.txt')
pcrB_parse = function(pcrB_string){
if(grepl("_v1$",pcrB_string)){
pcrB_string = gsub("_v1$",'',pcrB_string)
}
return(pcrB_string)
}
?tidyr::separate
sample_ID_extract = function(sampleIDpath){
sampleid = utils::read.table(sampleIDpath, sep = " ")
sampleid = sampleid[,c(1,3)]
colnames(sampleid) = c("PCR_B","sample_SNP")
sampleid$PCR_B = pcrB_parse(sampleid$PCR_B)
sampleid = tidyr::separate(sampleid, col = PCR_B, into = c("PCR_ID","biopsy_ID"))
return(sampleid)
}
pcrB_parse = function(pcrB_string){
if(grepl("_v1$",pcrB_string)){
pcrB_string = gsub("_v1$",'',pcrB_string)
}
return(pcrB_string)
}
sample_ID_extract('/Users/manzo/USB/USB_Diagnostics/sampleID/input/sampleID.txt')
sample_ID_extract = function(sampleIDpath){
sampleid = utils::read.table(sampleIDpath, sep = " ")
sampleid = sampleid[,c(1,3)]
colnames(sampleid) = c("PCR_B","sample_SNP")
sampleid$PCR_B = pcrB_parse(sampleid$PCR_B)
sampleid = tidyr::separate(sampleid, col = PCR_B, into = c("PCR_ID","biopsy_ID"), sep = "_")
return(sampleid)
}
pcrB_parse = function(pcrB_string){
if(grepl("_v1$",pcrB_string)){
pcrB_string = gsub("_v1$",'',pcrB_string)
}
return(pcrB_string)
}
sample_ID_extract('/Users/manzo/USB/USB_Diagnostics/sampleID/input/sampleID.txt')
sampleids = list.files(pattern = "sampleID.txt", path = '/Volumes/GoogleDrive/Shared drives/NGS_Patientendaten/Patientendaten/2022/W3551_W3600')
sampleids
sampleids = list.files(pattern = "sampleID.txt",recursive = TRUE, full.names = TRUE, path = '/Volumes/GoogleDrive/Shared drives/NGS_Patientendaten/Patientendaten/2022/W3551_W3600')
sampleids
lapply(sampleids, sample_ID_extract)
file.size(sampleids)
dplyr::bind_rows(lapply(sampleids[-1], sample_ID_extract))
sampleids
file.exists(sampleids)
dplyr::bind_rows(lapply(sampleids[3], sample_ID_extract))
dplyr::bind_rows(lapply(sampleids[4], sample_ID_extract))
dplyr::bind_rows(lapply(sampleids[2], sample_ID_extract))
dplyr::bind_rows(lapply(sampleids[1], sample_ID_extract))
dplyr::bind_rows(lapply(sampleids[2], sample_ID_extract))
dplyr::bind_rows(lapply(sampleids[3], sample_ID_extract))
dplyr::bind_rows(lapply(sampleids[4], sample_ID_extract))
dplyr::bind_rows(lapply(sampleids[5], sample_ID_extract))
dplyr::bind_rows(lapply(sampleids[6], sample_ID_extract))
dplyr::bind_rows(lapply(sampleids[7], sample_ID_extract))
dplyr::bind_rows(lapply(sampleids[8], sample_ID_extract))
dplyr::bind_rows(lapply(sampleids[9], sample_ID_extract))
sampleids[9]
readLines(sampleids[9])
readLines(sampleids[1])
sample_ID_extract = function(sampleIDpath){
sampleid = readlines(sampleIDpath)
sampleid = strsplit(sampleid, split = " ")
sampleid = data.frame(PCR_B = sampleid[1],sample_SNP = sampleid[2])
sampleid$PCR_B = pcrB_parse(sampleid$PCR_B)
sampleid = tidyr::separate(sampleid, col = PCR_B, into = c("PCR_ID","biopsy_ID"), sep = "_")
return(sampleid)
}
pcrB_parse = function(pcrB_string){
if(grepl("_v1$",pcrB_string)){
pcrB_string = gsub("_v1$",'',pcrB_string)
}
return(pcrB_string)
}
dplyr::bind_rows(lapply(sampleids[9], sample_ID_extract))
sample_ID_extract = function(sampleIDpath){
sampleid = readLines(sampleIDpath)
sampleid = strsplit(sampleid, split = " ")
sampleid = data.frame(PCR_B = sampleid[1],sample_SNP = sampleid[2])
sampleid$PCR_B = pcrB_parse(sampleid$PCR_B)
sampleid = tidyr::separate(sampleid, col = PCR_B, into = c("PCR_ID","biopsy_ID"), sep = "_")
return(sampleid)
}
dplyr::bind_rows(lapply(sampleids[9], sample_ID_extract))
readLines(sampleids[9])
sample_ID_extract = function(sampleIDpath){
sampleid = readLines(sampleIDpath)
if(!is.null(sampleid)){
sampleid = strsplit(sampleid, split = " ")
sampleid = data.frame(PCR_B = sampleid[1],sample_SNP = sampleid[2])
sampleid$PCR_B = pcrB_parse(sampleid$PCR_B)
sampleid = tidyr::separate(sampleid, col = PCR_B, into = c("PCR_ID","biopsy_ID"), sep = "_")
return(sampleid)
}
}
readLines(sampleids[9])
dplyr::bind_rows(lapply(sampleids, sample_ID_extract))
lapply(sampleids, sample_ID_extract)
sample_ID_extract = function(sampleIDpath){
sampleid = readLines(sampleIDpath)
if(!is.null(sampleid)){
sampleid = strsplit(sampleid, split = " ")
sampleid = data.frame(PCR_B = sampleid[1],sample_SNP = sampleid[3])
sampleid$PCR_B = pcrB_parse(sampleid$PCR_B)
sampleid = tidyr::separate(sampleid, col = PCR_B, into = c("PCR_ID","biopsy_ID"), sep = "_")
return(sampleid)
}
}
dplyr::bind_rows(lapply(sampleids, sample_ID_extract))
sample_ID_extract = function(sampleIDpath){
sampleid = readLines(sampleIDpath)
if(!is.null(sampleid)){
sampleid = strsplit(sampleid, split = " ")
return(sampleid)
sampleid = data.frame(PCR_B = sampleid[1],sample_SNP = sampleid[3])
sampleid$PCR_B = pcrB_parse(sampleid$PCR_B)
sampleid = tidyr::separate(sampleid, col = PCR_B, into = c("PCR_ID","biopsy_ID"), sep = "_")
return(sampleid)
}
}
dplyr::bind_rows(lapply(sampleids, sample_ID_extract))
lapply(sampleids, sample_ID_extract)
strsplit("W3587_B2022.52197_v1 : M-TGRYRCRT"  , split = " ")
strsplit("W3587_B2022.52197_v1 : M-TGRYRCRT"  , split = " ")[[1]]
sample_ID_extract = function(sampleIDpath){
sampleid = readLines(sampleIDpath)
if(!is.null(sampleid)){
sampleid = strsplit(sampleid, split = " ")[[1]]
return(sampleid)
sampleid = data.frame(PCR_B = sampleid[1],sample_SNP = sampleid[3])
sampleid$PCR_B = pcrB_parse(sampleid$PCR_B)
sampleid = tidyr::separate(sampleid, col = PCR_B, into = c("PCR_ID","biopsy_ID"), sep = "_")
return(sampleid)
}
}
lapply(sampleids, sample_ID_extract)
sample_ID_extract = function(sampleIDpath){
sampleid = readLines(sampleIDpath)
if(!is.null(sampleid)){
sampleid = strsplit(sampleid, split = " ")[[1]]
sampleid = data.frame(PCR_B = sampleid[1],sample_SNP = sampleid[3])
sampleid$PCR_B = pcrB_parse(sampleid$PCR_B)
sampleid = tidyr::separate(sampleid, col = PCR_B, into = c("PCR_ID","biopsy_ID"), sep = "_")
return(sampleid)
}
}
lapply(sampleids, sample_ID_extract)
lapply(sampleids[1:5], sample_ID_extract)
lapply(sampleids[8], sample_ID_extract)
lapply(sampleids[9], sample_ID_extract)
lapply(sampleids[10], sample_ID_extract)
lapply(sampleids[11], sample_ID_extract)
lapply(sampleids[12], sample_ID_extract)
sample_ID_extract = function(sampleIDpath){
sampleid = readLines(sampleIDpath)
if(identical(sampleid, "character(0)")){
sampleid = strsplit(sampleid, split = " ")[[1]]
sampleid = data.frame(PCR_B = sampleid[1],sample_SNP = sampleid[3])
sampleid$PCR_B = pcrB_parse(sampleid$PCR_B)
sampleid = tidyr::separate(sampleid, col = PCR_B, into = c("PCR_ID","biopsy_ID"), sep = "_")
return(sampleid)
}
}
lapply(sampleids[9], sample_ID_extract)
lapply(sampleids, sample_ID_extract)
sample_ID_extract = function(sampleIDpath){
sampleid = readLines(sampleIDpath)
if(!identical(sampleid, "character(0)")){
sampleid = strsplit(sampleid, split = " ")[[1]]
sampleid = data.frame(PCR_B = sampleid[1],sample_SNP = sampleid[3])
sampleid$PCR_B = pcrB_parse(sampleid$PCR_B)
sampleid = tidyr::separate(sampleid, col = PCR_B, into = c("PCR_ID","biopsy_ID"), sep = "_")
return(sampleid)
}
}
lapply(sampleids, sample_ID_extract)
sample_ID_extract = function(sampleIDpath){
sampleid = readLines(sampleIDpath)
if(!identical(sampleid, "character(0)")){
sampleid = strsplit(sampleid, split = " ")[[1]]
sampleid = data.frame(PCR_B = sampleid[1],sample_SNP = sampleid[3])
sampleid$PCR_B = pcrB_parse(sampleid$PCR_B)
sampleid = tidyr::separate(sampleid, col = PCR_B, into = c("PCR_ID","biopsy_ID"), sep = "_")
return(sampleid)
}
}
lapply(sampleids, sample_ID_extract)
readLines(sampleids[9])
identical(readLines(sampleids[9]), 'character(0)')
readLines(sampleids[9])
identical(readLines(sampleids[9]), is.null())
identical(readLines(sampleids[9]), is.null)
readLines(sampleids[9])
sample_ID_extract = function(sampleIDpath){
sampleid = readLines(sampleIDpath)
if(!identical(sampleid, character(0))){
sampleid = strsplit(sampleid, split = " ")[[1]]
sampleid = data.frame(PCR_B = sampleid[1],sample_SNP = sampleid[3])
sampleid$PCR_B = pcrB_parse(sampleid$PCR_B)
sampleid = tidyr::separate(sampleid, col = PCR_B, into = c("PCR_ID","biopsy_ID"), sep = "_")
return(sampleid)
}
}
lapply(sampleids, sample_ID_extract)
dplyr::bind_rows(lapply(sampleids, sample_ID_extract))
sampleids = list.files(pattern = "sampleID.txt",recursive = TRUE, full.names = TRUE,
path = '/Volumes/GoogleDrive/Shared drives/NGS_Patientendaten/Patientendaten/2022/W3551_W3600')
sampleids
sampleids = list.files(pattern = "sampleID.txt",recursive = TRUE, full.names = TRUE,
path = '/Volumes/GoogleDrive/Shared drives/NGS_Patientendaten/Patientendaten/2022')
#####
library(optparse)
readr::write_tsv(sampleID,"SampleID_table.tsv", append = TRUE)
total_counts(clonesum_read(testfiles[4]))
testfiles
total_counts(clonesum_read(testfiles[1]))
getwd()
library(LymphocyteSeq)
# Load libs and data
suppressPackageStartupMessages({
library(knitr)
library(kableExtra)
library(ggplot2)
library(gridExtra)
library(data.table)
library(tidyverse)
library(janitor)
library(LymphocyteSeq)
})
params$panel_df
testfiles
clonesum_read(testfiles[1])
getwd()
testfiles[1]
clonesum_read(gsub("./", "/Users/manzo/USB/USB_Diagnostics/LymphocyteSeq/", testfiles[1])
)
clonesum_read(gsub("^\\./", "/Users/manzo/USB/USB_Diagnostics/LymphocyteSeq/", testfiles[1]))
clonesum_read(gsub("^\\./", "/Users/manzo/USB/USB_Diagnostics/LymphocyteSeq/", testfiles[1]))
getwd()
getwd()
#' Top Clone
#'
#' @param clonesum
#'
#' @return Return Frequency and sequence of top clone
#' @export
#'
#' @examples
topClone = function(clonesum){
clonesum = clonesum[which(clonesum$rank == 1)]
return(clonesum)
}
clonsum = clonesum_read(gsub("^\\./", "/Users/manzo/USB/USB_Diagnostics/LymphocyteSeq/", testfiles[1]))
topClone(clonsum)
testfiles[1]
getwd()
devtools::document()
devtools::document()
library(LymphocyteSeq)
LymphocyteSeq::topClone()
devtools::document()
LymphocyteSeq::topClone()
LymphocyteSeq::topClone()
devtools::document()
warnings()
devtools::install_github('manzomonza/LymphocyteSeq')
clonsum
clonsum$productive_frequency
#' Top Clone
#'
#' @param clonesum
#'
#' @return Return Frequency and sequence of top clone
#' @export
#'
#' @examples
topClone = function(clonesum){
prod_freq = clonesum[which(clonesum$rank == 1)]$productive_frequency
prod_freq = round(as.numeric(prod_freq)*100,1)
stringoi = paste0("Largest clone frequency: ",prod_freq, "%" )
return(clonesum)
}
devtools::install_github('manzomonza/LymphocyteSeq')
LymphocyteSeq::topClone(clonsum)
devtools::install_github('manzomonza/LymphocyteSeq')
#' Top Clone
#'
#' @param clonesum
#'
#' @return Return Frequency and sequence of top clone
#' @export
#'
#' @examples
topClone = function(clonesum){
prod_freq = clonesum[which(clonesum$rank == 1)]$productive_frequency
prod_freq = round(as.numeric(prod_freq)*100,1)
stringoi = paste0("Largest clone frequency: ",prod_freq, "%" )
return(clonesum)
}
LymphocyteSeq::topClone(clonsum)
topClone(clonsum)
#' Top Clone
#'
#' @param clonesum
#'
#' @return Return Frequency and sequence of top clone
#' @export
#'
#' @examples
topClone = function(clonesum){
prod_freq = clonesum[which(clonesum$rank == 1)]$productive_frequency
prod_freq = round(as.numeric(prod_freq)*100,1)
stringoi = paste0("Largest clone frequency: ",prod_freq, "%" )
return(clonesum)
}
clonsum
prod_freq = clonsum[which(clonsum$rank == 1)]$productive_frequency
prod_freq
prod_freq = round(as.numeric(prod_freq)*100,1)
prod_freq
stringoi = paste0("Largest clone frequency: ",prod_freq, "%" )
stringoi
topfreq = topClone(clonsum)
topfreq
#' Top Clone
#'
#' @param clonesum
#'
#' @return Return Frequency and sequence of top clone
#' @export
#'
#' @examples
topClone = function(clonesum){
prod_freq = clonesum[which(clonesum$rank == 1)]$productive_frequency
prod_freq = round(as.numeric(prod_freq)*100,1)
stringoi = paste0("Largest clone frequency: ",prod_freq, "%" )
return(clonesum)
}
topfreq = topClone(clonsum)
topfreq
#' Top Clone
#'
#' @param clonesum
#'
#' @return Return Frequency and sequence of top clone
#' @export
#'
#' @examples
topClone = function(clonesum){
prod_freq = clonesum[which(clonesum$rank == 1)]$productive_frequency
prod_freq = round(as.numeric(prod_freq)*100,1)
stringoi = paste0("Largest clone frequency: ",prod_freq, "%" )
return(stringoi)
}
devtools::install_github('manzomonza/LymphocyteSeq')
prod_freq = clonsum[which(clonsum$rank == 1)]$productive_frequency
prod_freq
prod_freq = round(as.numeric(prod_freq)*100,1)
prod_freq
stringoi = paste0("Largest clone frequency: ",prod_freq, "%" )
stringoi
LymphocyteSeq::topClone(clonsum)
library(LymphocyteSeq)
LymphocyteSeq::topClone(clonsum)
devtools::install_github('manzomonza/LymphocyteSeq')
library(LymphocyteSeq)
LymphocyteSeq::topClone(clonsum)
