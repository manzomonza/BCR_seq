return(filecheck)
}
check_concordance <- function(dirpath){
files = list.files(path = dirpath, pattern = ".*clone_summary.csv", full.names = TRUE, recursive = TRUE)
files = lapply(files, clonesum_read)
filecheck = lapply(files, path_to_info)
filecheck = rbind(filecheck)
return(filecheck)
}
check_concordance('./input/BCR/W3525_BCR/')
getwd()
dir('./input/BCR/W3525_BCR/')
check_concordance <- function(dirpath){
files = list.files(path = dirpath, pattern = ".*clone_summary.csv", full.names = TRUE, recursive = TRUE)
filecheck = lapply(files, path_to_info)
filecheck = rbind(filecheck)
return(filecheck)
}
check_concordance('./input/BCR/W3525_BCR/')
check_concordance <- function(dirpath){
files = list.files(path = dirpath, pattern = ".*clone_summary.csv", full.names = TRUE, recursive = TRUE)
filecheck = lapply(files, path_to_info)
filecheck = cbind(filecheck)
return(filecheck)
}
check_concordance('./input/BCR/W3525_BCR/')
check_concordance <- function(dirpath){
files = list.files(path = dirpath, pattern = ".*clone_summary.csv", full.names = TRUE, recursive = TRUE)
filecheck = sapply(files, path_to_info)
filecheck = rbind(filecheck)
return(filecheck)
}
check_concordance('./input/BCR/W3525_BCR/')
check_concordance <- function(dirpath){
files = list.files(path = dirpath, pattern = ".*clone_summary.csv", full.names = TRUE, recursive = TRUE)
filecheck = unname(sapply(files, path_to_info))
filecheck = rbind(filecheck)
return(filecheck)
}
check_concordance('./input/BCR/W3525_BCR/')
check_concordance <- function(dirpath){
files = list.files(path = dirpath, pattern = ".*clone_summary.csv", full.names = TRUE, recursive = TRUE)
filecheck = lapply(files, path_to_info))
filecheck = dplyr::bind_rows(filecheck)
return(filecheck)
}
check_concordance('./input/BCR/W3525_BCR/')
check_concordance <- function(dirpath){
files = list.files(path = dirpath, pattern = ".*clone_summary.csv", full.names = TRUE, recursive = TRUE)
filecheck = lapply(files, path_to_info)
filecheck = dplyr::bind_rows(filecheck)
return(filecheck)
}
check_concordance('./input/BCR/W3525_BCR/')
check_concordance <- function(dirpath){
files = list.files(path = dirpath, pattern = ".*clone_summary.csv", full.names = TRUE, recursive = TRUE)
filecheck = lapply(files, path_to_info)
filecheck = dplyr::bind_rows(filecheck)
return(filecheck)
}
check_concordance('./input/TCR/')
check_concordance('./input/TCR/')
check_files <- function(dirpath){
files = list.files(path = dirpath, pattern = ".*clone_summary.csv", full.names = TRUE, recursive = TRUE)
filecheck = lapply(files, path_to_info)
filecheck = dplyr::bind_rows(filecheck)
return(filecheck)
}
check_concordance('./input/TCR/')
check_concordance('./input/TCR/')
panel_dataframe <- function(dirpath){
files = list.files(path = dirpath, pattern = ".*clone_summary.csv", full.names = TRUE, recursive = TRUE)
filecheck = lapply(files, path_to_info)
filecheck = dplyr::bind_rows(filecheck)
return(filecheck)
}
check_concordance('./input/TCR/')
check_concordance('./input/TCR')
panel_dataframe <- function(dirpath){
files = list.files(path = dirpath, pattern = ".*clone_summary.csv", full.names = TRUE, recursive = TRUE)
filecheck = lapply(files, path_to_info)
filecheck = dplyr::bind_rows(filecheck)
return(filecheck)
}
panel_dataframe('./input/TCR')
panel_dataframe('./input/TCR')
testfiles[1]
clonesum_read(testfiles[1])
panel_dataframe(testfiles)
panel_dataframe(testfiles[1])
testfiles
panel_dataframe('/input/BCR/')
panel_dataframe('./input/BCR/')
panel_dataframe('./input/BCR') |>
dplyr::group_by(panel)
panel_dataframe('./input/BCR') |>
dplyr::group_by(by = 'panel')
panel_dataframe('./input/BCR') |>
dplyr::group_by(panel)
panel_dataframe('./input/BCR') |>
dplyr::group_by(panel)
dplyr::group_by(panel_dataframe('./input/BCR'),panel)
testme = dplyr::group_by(panel_dataframe('./input/BCR'),panel)
testme = dplyr::group_split(panel_dataframe('./input/BCR'))
testme
check_panel_dataframe <- function(panel_df){
if(nrow(panel_df) == 2){
}else{
panel_df = dplyr::group_by(panel_df, panel)
panel_df = dplyr::group_split(panel_df)
return(list(lapply(panel_df, check_panel_dataframe)))
}
if(panel_match){
index_mismatch = check_concordance_output[[1]]$index != check_concordance_output[[2]]$index
}else{
stop("Discordant lymphocyte sequencing panels")
}
if(index_mismatch){
return(check_concordance_output[[1]]$panel)
}
}
panel_dataframe('./input/TCR')
panel_dataframe('./input/')
check_panel_dataframe(panel_dataframe('./input'))
check_panel_dataframe <- function(panel_df){
if(nrow(panel_df) == 2){
panel_match = panel_df$panel[1] == panel_df$panel[2]
}else if(nrow(panel_df < 2)){
stop("insufficient clone summaries")
}
}else{
panel_df = dplyr::group_by(panel_df, panel)
panel_df = dplyr::group_split(panel_df)
return(list(lapply(panel_df, check_panel_dataframe)))
}
check_panel_dataframe <- function(panel_df){
if(nrow(panel_df) == 2){
panel_match = panel_df$panel[1] == panel_df$panel[2]
}else if(nrow(panel_df < 2)){
stop("insufficient clone summaries")
}else{
panel_df = dplyr::group_by(panel_df, panel)
panel_df = dplyr::group_split(panel_df)
return(list(lapply(panel_df, check_panel_dataframe)))
}
if(panel_match){
index_mismatch = check_concordance_output[[1]]$index != check_concordance_output[[2]]$index
}else{
stop("Discordant lymphocyte sequencing panels")
}
if(index_mismatch){
return(check_concordance_output[[1]]$panel)
}
}
check_panel_dataframe(panel_dataframe('./input'))
check_panel_dataframe <- function(panel_df){
if(nrow(panel_df) == 2){
panel_match = panel_df$panel[1] == panel_df$panel[2]
}else if(nrow(panel_df < 2)){
stop("insufficient clone summaries")
}else{
panel_df = dplyr::group_by(panel_df, panel)
panel_df = dplyr::group_split(panel_df)
return(list(lapply(panel_df, check_panel_dataframe)))
}
if(panel_match){
index_mismatch = check_concordance_output[[1]]$index != check_concordance_output[[2]]$index
}else{
stop("Discordant lymphocyte sequencing panels")
}
if(index_mismatch){
return('that great')
}
}
check_panel_dataframe(panel_dataframe('./input'))
panel_dataframe('./input')
check_panel_dataframe <- function(panel_df){
if(nrow(panel_df) == 2){
panel_match = panel_df$panel[1] == panel_df$panel[2]
}else if(nrow(panel_df < 2)){
stop("insufficient clone summaries")
}else{
panel_df = dplyr::group_by(panel_df, panel)
panel_df = dplyr::group_split(panel_df)
return(list(lapply(panel_df, check_panel_dataframe)))
}
if(panel_match){
index_mismatch = check_concordance_output[[1]]$index != check_concordance_output[[2]]$index
}else{
stop("Discordant lymphocyte sequencing panels")
}
if(index_mismatch){
return('that great')
}
}
check_panel_dataframe(panel_dataframe('./input'))
check_panel_dataframe <- function(panel_df){
if(nrow(panel_df) == 2){
panel_match = panel_df$panel[1] == panel_df$panel[2]
}else if(nrow(panel_df < 2)){
stop("insufficient clone summaries")
}else{
panel_df = dplyr::group_by(panel_df, panel)
panel_df = dplyr::group_split(panel_df)
return(list(lapply(panel_df, check_panel_dataframe)))
}
if(panel_match){
index_mismatch = check_concordance_output[[1]]$index != check_concordance_output[[2]]$index
}else{
stop("Discordant lymphocyte sequencing panels")
}
if(index_mismatch){
return('that great')
}
}
check_panel_dataframe(panel_dataframe('./input'))
check_panel_dataframe <- function(panel_df){
if(nrow(panel_df) == 2){
panel_match = panel_df$panel[1] == panel_df$panel[2]
}else if(nrow(panel_df < 2)){
stop("insufficient clone summaries")
}else{
panel_df = dplyr::group_by(panel_df, panel)
panel_df = dplyr::group_split(panel_df)
return(list(lapply(panel_df, check_panel_dataframe)))
}
if(panel_match){
return('that great')
}else{
stop("Discordant lymphocyte sequencing panels")
}
if(index_mismatch){
return('that great')
}
}
testme = dplyr::group_by(panel_dataframe('./input/BCR'),panel)
testme = dplyr::group_split()
check_panel_dataframe(panel_dataframe('./input'))
panel_dataframe('./input')
check_panel_dataframe <- function(panel_df){
if(nrow(panel_df) == 2){
panel_match = panel_df$panel[1] == panel_df$panel[2]
}else if(nrow(panel_df < 2)){
stop("insufficient clone summaries")
}else{
panel_group = dplyr::group_by(panel_df, panel)
panel_group = dplyr::group_split(panel_group)
return(list(lapply(panel_group, check_panel_dataframe)))
}
if(panel_match){
return('that great')
}else{
stop("Discordant lymphocyte sequencing panels")
}
if(index_mismatch){
return('that great')
}
}
check_panel_dataframe(panel_dataframe('./input'))
testme = dplyr::group_by(panel_dataframe('./input/BCR'),panel)
check_panel_dataframe <- function(panel_df){
if(nrow(panel_df) == 2){
panel_match = panel_df$panel[1] == panel_df$panel[2]
}else if(nrow(panel_df < 2)){
stop("insufficient clone summaries")
}else{
panel_group = dplyr::group_by(panel_df, panel)
panel_group = dplyr::group_split(panel_group)
return(list(lapply(panel_group, check_panel_dataframe)))
}
if(panel_match){
return('that great')
}else{
stop("Discordant lymphocyte sequencing panels")
}
if(index_mismatch){
return('that great')
}
}
check_panel_dataframe(panel_dataframe('./input'))
panel_dataframe('./input')
check_panel_dataframe <- function(panel_df){
if(nrow(panel_df) == 2){
panel_match = panel_df$panel[1] == panel_df$panel[2]
print('right here')
}else if(nrow(panel_df < 2)){
stop("insufficient clone summaries")
}else{
panel_group = dplyr::group_by(panel_df, panel)
panel_group = dplyr::group_split(panel_group)
return(list(lapply(panel_group, check_panel_dataframe)))
}
if(panel_match){
return('that great')
}else{
stop("Discordant lymphocyte sequencing panels")
}
if(index_mismatch){
return('that great')
}
}
check_panel_dataframe(panel_dataframe('./input'))
panel_df
panel_dataframe('./input/BCR')
testme = dplyr::group_by(panel_dataframe('./input'),panel)
testme = dplyr::group_split()
testme = dplyr::group_by(panel_dataframe('./input'),panel)
panel_dataframe('./input')
testme = dplyr::group_by(panel_dataframe('./input'),panel)
testme
testme = dplyr::group_split(testme)
testme
check_panel_dataframe <- function(panel_df){
if(nrow(panel_df) == 2){
panel_match = panel_df$panel[1] == panel_df$panel[2]
print('right here')
}else if(nrow(panel_df < 2)){
stop("insufficient clone summaries")
}else{
panel_group = dplyr::group_by(panel_df, panel)
panel_group = dplyr::group_split(panel_group)
return(list(lapply(panel_group, check_panel_dataframe)))
}
if(panel_match){
return('that great')
}else{
stop("Discordant lymphocyte sequencing panels")
}
if(index_mismatch){
return('that great')
}
}
check_panel_dataframe(panel_dataframe('./input'))
check_panel_dataframe <- function(panel_df){
print(nrow(panel_df))
if(nrow(panel_df) == 2){
panel_match = panel_df$panel[1] == panel_df$panel[2]
print('right here')
}else if(nrow(panel_df < 2)){
stop("insufficient clone summaries")
}else{
panel_group = dplyr::group_by(panel_df, panel)
panel_group = dplyr::group_split(panel_group)
return(list(lapply(panel_group, check_panel_dataframe)))
}
if(panel_match){
return('that great')
}else{
stop("Discordant lymphocyte sequencing panels")
}
if(index_mismatch){
return('that great')
}
}
check_panel_dataframe(panel_dataframe('./input'))
check_panel_dataframe <- function(panel_df){
print(nrow(panel_df))
if(nrow(panel_df) == 2){
panel_match = panel_df$panel[1] == panel_df$panel[2]
print('right here')
}else if(nrow(panel_df) < 2){
stop("insufficient clone summaries")
}else{
panel_group = dplyr::group_by(panel_df, panel)
panel_group = dplyr::group_split(panel_group)
return(list(lapply(panel_group, check_panel_dataframe)))
}
if(panel_match){
return('that great')
}else{
stop("Discordant lymphocyte sequencing panels")
}
if(index_mismatch){
return('that great')
}
}
check_panel_dataframe(panel_dataframe('./input'))
check_panel_dataframe <- function(panel_df){
print(nrow(panel_df))
if(nrow(panel_df) == 2){
panel_match = panel_df$panel[1] == panel_df$panel[2]
}else if(nrow(panel_df) < 2){
stop("insufficient clone summaries")
}else{
panel_group = dplyr::group_by(panel_df, panel)
panel_group = dplyr::group_split(panel_group)
return(list(lapply(panel_group, check_panel_dataframe)))
}
if(panel_match){
return('that great')
}else{
stop("Discordant lymphocyte sequencing panels")
}
if(index_mismatch){
return('that great')
}
}
check_panel_dataframe(panel_dataframe('./input'))
check_panel_dataframe <- function(panel_df){
if(nrow(panel_df) == 2){
panel_match = panel_df$panel[1] == panel_df$panel[2]
}else if(nrow(panel_df) < 2){
stop("insufficient clone summaries")
}else{
panel_group = dplyr::group_by(panel_df, panel)
panel_group = dplyr::group_split(panel_group)
return(list(lapply(panel_group, check_panel_dataframe)))
}
if(panel_match){
index_mismatch = panel_df$index[1] != panel_df$index[2]
}else{
stop("Discordant lymphocyte sequencing panels")
}
if(index_mismatch){
return(panel_df)
}
}
check_panel_dataframe(panel_dataframe('./input'))
testfiles = c('../input/BCR/W3525_BCR/W3525_B2022.50915_v1_20221204101340383.clone_summary.csv',
'../input/BCR/W3525_BCR/W3525_B2022.50915_v1_20221204101403744.clone_summary.csv',
'../input/TCR/W2406_K2022.1455_20220903012053696.clone_summary.csv')
panel_dataframe <- function(listoffiles){
filecheck = lapply(listoffiles, path_to_info)
filecheck = dplyr::bind_rows(filecheck)
return(filecheck)
}
panel_dataframe('./input/TCR')
testfiles = c('../input/BCR/W3525_BCR/W3525_B2022.50915_v1_20221204101340383.clone_summary.csv',
'../input/BCR/W3525_BCR/W3525_B2022.50915_v1_20221204101403744.clone_summary.csv',
'../input/TCR/W2406_K2022.1455_20220903012053696.clone_summary.csv')
panel_dataframe(testfiles)
testfiles = c('./input/BCR/W3525_BCR/W3525_B2022.50915_v1_20221204101340383.clone_summary.csv',
'./input/BCR/W3525_BCR/W3525_B2022.50915_v1_20221204101403744.clone_summary.csv',
'./input/TCR/W2406_K2022.1455_20220903012053696.clone_summary.csv')
panel_dataframe(testfiles)
check_panel_dataframe(panel_dataframe(testfiles))
testfiles = c('./input/BCR/W3525_BCR/W3525_B2022.50915_v1_20221204101340383.clone_summary.csv',
'./input/BCR/W3525_BCR/W3525_B2022.50915_v1_20221204101403744.clone_summary.csv')
check_panel_dataframe(panel_dataframe(testfiles))
check_panel_dataframe(panel_dataframe(testfiles))
devtools::document()
devtools::document()
devtools::document()
warnings()
# dataset <- readr::read_tsv("Sample_centric_SNV.tsv", col_names = FALSE)
# colnames(dataset)[17] <- 'gene'
# colnames(dataset)[18] <- 'coding'
# colnames(dataset)[19] <- 'amino_acid_change'
# dataset <- dataset %>% dplyr::relocate(gene, coding, amino_acid_change)
dataset <- data.table::fread("Sample_centric_mutation_list.tsv")
dataset
dataset
dataset
filepaths <- c('/Volumes/GoogleDrive/.shortcut-targets-by-id/1yuFiN1dlcUgo1_ELdNVXegTfB61oDv8G/Patientendaten/Development/tables/Sample_centric_SNV.tsv',
'/Volumes/GoogleDrive/.shortcut-targets-by-id/1yuFiN1dlcUgo1_ELdNVXegTfB61oDv8G/Patientendaten/Development/tables/Sample_centric_CNV.tsv',
'/Volumes/GoogleDrive/.shortcut-targets-by-id/1yuFiN1dlcUgo1_ELdNVXegTfB61oDv8G/Patientendaten/Development/tables/Sample_centric_FILTERED.tsv')
# dtme <- data.table::fread(filepaths[1], col.names = TRUE, sep = "\t")
dataset_cnv <- readr::read_tsv(filepaths[2])
dataset_snv <- readr::read_tsv(filepaths[1]) %>%
dplyr::filter(percent_frequency != "reference" & percent_frequency != "hg19" & percent_frequency != "percent_frequency")
dataset_filtered_lines <- readr::read_tsv(filepaths[3]) %>%
dplyr::filter(percent_frequency != "reference" & percent_frequency != "hg19" & percent_frequency != "percent_frequency")
testfiles = c('./input/BCR/W3525_BCR/W3525_B2022.50915_v1_20221204101340383.clone_summary.csv',
'./input/BCR/W3525_BCR/W3525_B2022.50915_v1_20221204101403744.clone_summary.csv',
'./input/TCR/W2406_K2022.1455_20220903012053696.clone_summary.csv',
'./input/TCR/W2406_K2022.1455_20220903012128818.clone_summary.csv')
lapply(testfiles,path_to_info)
panel_dataframe(testfiles)
path_to_info(panel_dataframe(testfiles[1:2])
)
path_to_info(panel_dataframe(testfiles[1:2]))
panel_dataframe(testfiles[1:2]))
panel_dataframe(testfiles[1:2])
check_panel_dataframe(panel_dataframe(testfiles[1:2]))
check_panel_dataframe(panel_dataframe(testfiles[c(1,3)]))
check_panel_dataframe(panel_dataframe(testfiles[c(1,2)]))
check_panel_dataframe(panel_dataframe(testfiles[c(1,4)]))
check_panel_dataframe(panel_dataframe(testfiles[c(2,3)]))
check_panel_dataframe(panel_dataframe(testfiles[c(3,4)]))
check_panel_dataframe(panel_dataframe(testfiles[c(1:3)]))
testthat::test_that(desc = "Correct assignment of panel",
code = {
filei = clonesum_read(testfiles[1])
testthat::expect_equal(check_seq_panel(file = filei),
"BCR_H"
)
filei = clonesum_read(testfiles[2])
testthat::expect_equal(check_seq_panel(file = filei),
"BCR_K_L"
)
filei = clonesum_read(testfiles[3])
testthat::expect_equal(check_seq_panel(file = filei),
"TCR_gamma"
)
filei = clonesum_read(testfiles[4])
testthat::expect_equal(check_seq_panel(file = filei),
"TCR_beta"
)
}
)
panel_decision <- function(panel_df){
panel = unique(panel_df$panel)
if(panel == "TCR"){
return("TCR")
}else if(panel == "BCR"){
return("BCR")
}else{
stop("panel without reporting yet")
}
}
library(parallel)
?mclapply()
