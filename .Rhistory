#' @param filevector
#'
#' @return
#' @export
#'
#' @examples banana AND ananas -> anana
filename_extract <- function(filestr1, filestr2){
filestr1 = basename(filestr1)
filestr2 = basename(filestr2)
i = nchar(filestr2)-5
while(i <=(nchar(filestr2))){
testme = substr(filestr2, start = 1,stop =i)
test_substring = stringr::str_detect(filestr1, testme)
#print(testme)
if(test_substring){
i = i+1
}else{
return(substr(testme, start = 1, stop = i-1))
}
}
return(testme)
}
filename_extract(filestr1 = 'ananasscbc',filestr2 = 'ananas')
filename_extract(filestr1 = 'banana',filestr2 = 'ananas')
testfiles = c('./input/BCR/W3525_BCR/W3525_B2022.50915_v1_20221204101340383.clone_summary.csv',
'./input/BCR/W3525_BCR/W3525_B2022.50915_v1_20221204101403744.clone_summary.csv',
'./input/TCR/W2406_K2022.1455_20220903012053696.clone_summary.csv',
'./input/TCR/W2406_K2022.1455_20220903012128818.clone_summary.csv')
testthat::test_that(desc = "Correct assignment of panel",
code = {
filei = clonesum_read(testfiles[1])
testthat::expect_equal(check_seq_panel(file = filei),
"BCR_H"
)
filei = clonesum_read(testfiles[2])
testthat::expect_equal(check_seq_panel(file = filei),
"BCR_K_L"
)
filei = clonesum_read(testfiles[3])
testthat::expect_equal(check_seq_panel(file = filei),
"TCR_gamma"
)
filei = clonesum_read(testfiles[4])
testthat::expect_equal(check_seq_panel(file = filei),
"TCR_beta"
)
}
)
panel_dataframe(testfiles)
check_panel_dataframe(panel_dataframe(testfiles))
check_panel_dataframe(panel_dataframe(testfiles[1:2]))
panel_decision(check_panel_dataframe(panel_dataframe(testfiles[1:2])))
panel_decision(check_panel_dataframe(panel_dataframe(testfiles[1,3])))
panel_decision(check_panel_dataframe(panel_dataframe(testfiles[c(1,3)])))
panel_decision(check_panel_dataframe(panel_dataframe(testfiles[c(1,2)])))
panel_decision(check_panel_dataframe(panel_dataframe(testfiles[c(3,2)])))
panel_decision(check_panel_dataframe(panel_dataframe(testfiles[c(3,4)])))
panel_decision(check_panel_dataframe(panel_dataframe(testfiles[c(1:3)])))
panel_decision(check_panel_dataframe(panel_dataframe(testfiles[c(1:3)])))
check_panel_dataframe(panel_dataframe(testfiles[c(1:3)]))
check_panel_dataframe(panel_dataframe(testfiles[c(1:3)]))
panel_dataframe(testfiles[c(1:3)])
panel_dataframe(testfiles[c(1:3)])
#' Extract info from clone summary and convert to dataframe
#'
#' @param filevector
#'
#' @return
#' @export
#'
#' @examples
panel_dataframe <- function(filevector){
panel_df = lapply(filevector, path_to_info)
panel_df = dplyr::bind_rows(panel_df)
panel_df = dplyr::group_by(panel_df,panel)
panel_df = dplyr::group_split(panel_df)
return(panel_df)
}
panel_dataframe(testfiles[c(1:3)])
panel_dataframe(testfiles[c(1:4)])
#' Check number of entries in panel dataframe, concordance in panel and discordance in indeces
#'
#' @param panel_df
#'
#' @return
#' @export
#'
#' @examples
check_panel_dataframe <- function(panel_df){
if(nrow(panel_df) == 2){
panel_match = panel_df$panel[1] == panel_df$panel[2]
}else(nrow(panel_df) < 2){
stop("insufficient clone summaries")
}
if(panel_match){
index_mismatch = panel_df$index[1] != panel_df$index[2]
}else{
stop("Discordant lymphocyte sequencing panels")
}
if(index_mismatch){
return(panel_df)
}
}
#' Check number of entries in panel dataframe, concordance in panel and discordance in indeces
#'
#' @param panel_df
#'
#' @return
#' @export
#'
#' @examples
check_panel_dataframe <- function(panel_df){
if(nrow(panel_df) == 2){
panel_match = panel_df$panel[1] == panel_df$panel[2]
}else{
stop("insufficient clone summaries")
}
if(panel_match){
index_mismatch = panel_df$index[1] != panel_df$index[2]
}else{
stop("Discordant lymphocyte sequencing panels")
}
if(index_mismatch){
return(panel_df)
}
}
panel_dataframe(testfiles[c(1:4)])
panel_dataframe(testfiles[c(1,1)])
check_panel_dataframe(panel_dataframe(testfiles[c(1,1)]))
#' Check number of entries in panel dataframe, concordance in panel and discordance in indeces
#'
#' @param panel_df
#'
#' @return
#' @export
#'
#' @examples
check_panel_dataframe <- function(panel_df){
if(nrow(panel_df) == 2){
panel_match = panel_df$panel[1] == panel_df$panel[2]
}else{
stop("insufficient clone summaries")
}
if(panel_match){
index_mismatch = panel_df$index[1] != panel_df$index[2]
}else{
stop("Discordant lymphocyte sequencing panels")
}
if(index_mismatch){
return(panel_df)
}
}
check_panel_dataframe(panel_dataframe(testfiles[c(1,1)]))
#' Check number of entries in panel dataframe, concordance in panel and discordance in indeces
#'
#' @param panel_df
#'
#' @return
#' @export
#'
#' @examples
check_panel_dataframe <- function(panel_df){
if(nrow(panel_df) == 2){
panel_match = panel_df$panel[1] == panel_df$panel[2]
}else{
stop("insufficient clone summaries")
}
if(panel_match){
index_mismatch = panel_df$index[1] != panel_df$index[2]
}else{
stop("Discordant lymphocyte sequencing panels")
}
if(index_mismatch){
return(panel_df)
}
}
panel_dataframe(testfiles[c(1,1)])
check_panel_dataframe(panel_dataframe(testfiles[c(1,1)]))
check_panel_dataframe(panel_dataframe(testfiles[c(1,1)]))
paneledf = panel_dataframe(testfiles[c(1,1)])
paneledf
lapply(paneledf, check_panel_dataframe)
paneledf = panel_dataframe(testfiles)
paneledf
lapply(paneledf, check_panel_dataframe)
paneledf = panel_dataframe(testfiles[1:3])
paneledf
lapply(paneledf, check_panel_dataframe)
#' Check number of entries in panel dataframe, concordance in panel and discordance in indeces
#'
#' @param panel_df
#'
#' @return
#' @export
#'
#' @examples
check_panel_dataframe <- function(panel_df){
if(nrow(panel_df) == 2){
panel_match = panel_df$panel[1] == panel_df$panel[2]
}else{
return(NA)
}
if(panel_match){
index_mismatch = panel_df$index[1] != panel_df$index[2]
}else{
return(NA)
}
if(index_mismatch){
return(panel_df)
}
}
paneledf = panel_dataframe(testfiles[1:3])
lapply(paneledf, check_panel_dataframe)
panel_df
panel_df = panel_dataframe(testfiles)
panel_df = lapply(panel_df, check_panel_dataframe)
panel_df
for(e in panel_df){
print(e)
}
for(e in panel_df){
if(!is.na(e)){
if(panel_decision(panel_df) == 'BCR'){
panel_specific_rmarkdown == bcr_rmarkdown
}else if(panel_decision(panel_df) == 'TCR'){
panel_specific_rmarkdown == tcr_rmarkdown
}else{
return("unsupported panel")
}
}
}
for(e in panel_df){
if(!is.na(e)){
if(panel_decision(e) == 'BCR'){
panel_specific_rmarkdown == bcr_rmarkdown
}else if(panel_decision(e) == 'TCR'){
panel_specific_rmarkdown == tcr_rmarkdown
}else{
return("unsupported panel")
}
}
}
for(e in panel_df){
if(!is.na(e)){
if(panel_decision(e) == 'BCR'){
panel_specific_rmarkdown = bcr_rmarkdown
}else if(panel_decision(e) == 'TCR'){
panel_specific_rmarkdown = tcr_rmarkdown
}else{
return("unsupported panel")
}
}
}
panel_decision(e)
bcr_rmarkdown = '/home/ionadmin/watchdog/LymphocyteSeq_report/BCR_report.Rmd'
tcr_rmarkdown = '/home/ionadmin/watchdog/LymphocyteSeq_report/TCR_report.Rmd'
for(e in panel_df){
if(!is.na(e)){
if(panel_decision(e) == 'BCR'){
panel_specific_rmarkdown = bcr_rmarkdown
}else if(panel_decision(e) == 'TCR'){
panel_specific_rmarkdown = tcr_rmarkdown
}else{
return("unsupported panel")
}
}
}
is.na(e)
!is.null(e)
#' Check number of entries in panel dataframe, concordance in panel and discordance in indeces
#'
#' @param panel_df
#'
#' @return
#' @export
#'
#' @examples
check_panel_dataframe <- function(panel_df){
if(nrow(panel_df) == 2){
panel_match = panel_df$panel[1] == panel_df$panel[2]
}else{
return(NULL)
}
if(panel_match){
index_mismatch = panel_df$index[1] != panel_df$index[2]
}else{
return(NULL)
}
if(index_mismatch){
return(panel_df)
}
}
for(e in panel_df){
if(!is.null(e)){
if(panel_decision(e) == 'BCR'){
panel_specific_rmarkdown = bcr_rmarkdown
}else if(panel_decision(e) == 'TCR'){
panel_specific_rmarkdown = tcr_rmarkdown
}else{
return("unsupported panel")
}
}
}
for(e in panel_df){
if(!is.null(e)){
if(panel_decision(e) == 'BCR'){
panel_specific_rmarkdown = bcr_rmarkdown
print(panel_specific_rmarkdown)
}else if(panel_decision(e) == 'TCR'){
panel_specific_rmarkdown = tcr_rmarkdown
print(panel_specific_rmarkdown)
}else{
return("unsupported panel")
}
}
}
devtools::document()
devtools::document()
warnings()
for(e in panel_df){
if(!is.null(e)){
if(panel_decision(e) == 'BCR'){
panel_specific_rmarkdown = bcr_rmarkdown
print(panel_specific_rmarkdown)
}else if(panel_decision(e) == 'TCR'){
panel_specific_rmarkdown = tcr_rmarkdown
print(panel_specific_rmarkdown)
}else{
return("unsupported panel")
}
rmarkdown::render(panel_specific_rmarkdown,
params = list(files = e$filepath,
panel = e$panel,
sample_ID = filename_extract(e$filepath[1], e$filepath[2]),
output_file = paste0(opt$dir,"/",sample_ID, '.html')))
}
}
for(e in panel_df){
if(!is.null(e)){
if(panel_decision(e) == 'BCR'){
panel_specific_rmarkdown = bcr_rmarkdown
print(panel_specific_rmarkdown)
}else if(panel_decision(e) == 'TCR'){
panel_specific_rmarkdown = tcr_rmarkdown
print(panel_specific_rmarkdown)
}else{
return("unsupported panel")
}
rmarkdown::render(panel_specific_rmarkdown,
params = list(files = e$filepath,
panel = e$panel,
sample_ID = filename_extract(e$filepath[1], e$filepath[2]),
output_file = paste0(opt$dir,"/", sample_ID, '.html')))
}
}
devtools::document()
for(e in panel_df){
if(!is.null(e)){
if(panel_decision(e) == 'BCR'){
panel_specific_rmarkdown = bcr_rmarkdown
print(panel_specific_rmarkdown)
}else if(panel_decision(e) == 'TCR'){
panel_specific_rmarkdown = tcr_rmarkdown
print(panel_specific_rmarkdown)
}else{
return("unsupported panel")
}
print(e$filepath[1])
print(e$filepath[2])
rmarkdown::render(panel_specific_rmarkdown,
params = list(files = e$filepath,
panel = e$panel,
sample_ID = filename_extract(e$filepath[1], e$filepath[2]),
output_file = paste0(opt$dir,"/", sample_ID, '.html')))
}
}
for(e in panel_df){
if(!is.null(e)){
if(panel_decision(e) == 'BCR'){
panel_specific_rmarkdown = bcr_rmarkdown
}else if(panel_decision(e) == 'TCR'){
panel_specific_rmarkdown = tcr_rmarkdown
}else{
return("unsupported panel")
}
print(e$filepath[1])
print(e$filepath[2])
print(panel_specific_rmarkdown)
rmarkdown::render(panel_specific_rmarkdown,
params = list(files = e$filepath,
panel = e$panel,
sample_ID = filename_extract(e$filepath[1], e$filepath[2]),
output_file = paste0(opt$dir,"/", sample_ID, '.html')))
}
}
testfiles
only_clonesummaries(testfiles)
only_clonesummaries(dirname(testfiles[1]))
as.character(only_clonesummaries(dirname(testfiles[1])))
for(e in panel_df){
if(!is.null(e)){
if(panel_decision(e) == 'BCR'){
panel_specific_rmarkdown = bcr_rmarkdown
}else if(panel_decision(e) == 'TCR'){
panel_specific_rmarkdown = tcr_rmarkdown
}else{
return("unsupported panel")
}
e$filepath = as.character(e$filepath)
## Print both files
print("Both files:")
print(e$filepath[1])
print(e$filepath[2])
print(panel_specific_rmarkdown)
rmarkdown::render(panel_specific_rmarkdown,
params = list(files = e$filepath,
panel = unique(e$panel),
sample_ID = filename_extract(e$filepath[1], e$filepath[2]),
output_file = paste0(opt$dir,"/", sample_ID, '.html')))
}
}
fi1 = "W3525_B2022.50915_v1_20221204101340383.clone_summary.csv"
fi2 = 'W3525_B2022.50915_v1_20221204101403744.clone_summary.csv'
filename_extract(filestr1 = fi1, filestr2 = fi2)
#' Extract common string from filenames
#'
#' @param filevector
#'
#' @return substring present in both filestrings
#' @export
#'
#' @examples banana AND ananas -> anana
#' will fail with more than two strings
filename_extract <- function(filestr1, filestr2){
filestr1 = basename(filestr1)
filestr2 = basename(filestr2)
i = nchar(filestr2)-15
while(i <=(nchar(filestr2))){
testme = substr(filestr2, start = 1,stop =i)
test_substring = stringr::str_detect(filestr1, testme)
#print(testme)
if(test_substring){
i = i+1
}else{
return(substr(testme, start = 1, stop = i-1))
}
}
return(testme)
}
fi1 = "W3525_B2022.50915_v1_20221204101340383.clone_summary.csv"
fi2 = 'W3525_B2022.50915_v1_20221204101403744.clone_summary.csv'
filename_extract(filestr1 = fi1, filestr2 = fi2)
#' Extract common string from filenames
#'
#' @param filevector
#'
#' @return substring present in both filestrings
#' @export
#'
#' @examples banana AND ananas -> anana
#' will fail with more than two strings
filename_extract <- function(filestr1, filestr2){
filestr1 = gsub(".clone_summary.csv",'',filestr1)
filestr2 = gsub(".clone_summary.csv",'',filestr2)
filestr1 = basename(filestr1)
filestr2 = basename(filestr2)
i = nchar(filestr2)-15
while(i <=(nchar(filestr2))){
testme = substr(filestr2, start = 1,stop =i)
test_substring = stringr::str_detect(filestr1, testme)
#print(testme)
if(test_substring){
i = i+1
}else{
return(substr(testme, start = 1, stop = i-1))
}
}
return(testme)
}
fi1 = "W3525_B2022.50915_v1_20221204101340383.clone_summary.csv"
fi2 = 'W3525_B2022.50915_v1_20221204101403744.clone_summary.csv'
#' Extract common string from filenames
#'
#' @param filevector
#'
#' @return substring present in both filestrings
#' @export
#'
#' @examples banana AND ananas -> anana
#' will fail with more than two strings
filename_extract <- function(filestr1, filestr2){
filestr1 = gsub(".clone_summary.csv",'',filestr1)
filestr2 = gsub(".clone_summary.csv",'',filestr2)
filestr1 = basename(filestr1)
filestr2 = basename(filestr2)
i = nchar(filestr2)-10
while(i <=(nchar(filestr2))){
testme = substr(filestr2, start = 1,stop =i)
test_substring = stringr::str_detect(filestr1, testme)
#print(testme)
if(test_substring){
i = i+1
}else{
return(substr(testme, start = 1, stop = i-1))
}
}
return(testme)
}
fi1 = "W3525_B2022.50915_v1_20221204101340383.clone_summary.csv"
fi2 = 'W3525_B2022.50915_v1_20221204101403744.clone_summary.csv'
filename_extract(filestr1 = fi1, filestr2 = fi2)
devtools::document()
